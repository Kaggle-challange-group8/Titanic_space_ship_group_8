# --- CNN ---
cnn = Sequential([
    Conv1D(64, kernel_size=3, activation='relu', input_shape=(X_train_cnn.shape[1], 1)),
    GlobalMaxPooling1D(),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])
cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
cnn.fit(X_train_cnn, y_train, epochs=20, batch_size=32, validation_data=(X_val_cnn, y_val), verbose=0)

cnn_preds = (cnn.predict(X_val_cnn) > 0.5).astype(int).flatten()
test_pred_cnn = (cnn.predict(X_test_cnn) > 0.5).astype(bool).flatten()

metrics_dict['CNN'] = {
    'Accuracy': accuracy_score(y_val, cnn_preds),
    'Precision': precision_score(y_val, cnn_preds),
    'Recall': recall_score(y_val, cnn_preds),
    'F1': f1_score(y_val, cnn_preds)
}
plot_confusion_matrix(y_val, cnn_preds, "CNN")
print_classification_report(y_val, cnn_preds, "CNN")
